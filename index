<!DOCTYPE html>
<html lang="es" data-theme="light">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Chat de Matías</title>

  <!-- ================ THEME ================ -->
  <style>
    :root[data-theme="light"]{
      --bg:#f7f7f8;
      --panel:#ffffff;
      --muted:#6b7280;
      --text:#0f1222;
      --accent:#10a37f;
      --border:#e5e7eb;
      --user:#dcfce7;
      --assistant:#f3f4f6;
      --chip:#eef2ff;
      --danger:#ef4444;
    }
    :root[data-theme="dark"]{
      --bg:#0f1117;
      --panel:#161922;
      --muted:#9aa3b2;
      --text:#e7e9ee;
      --accent:#6ea8ff;
      --border:#232736;
      --user:#142a1f;
      --assistant:#1b1f2a;
      --chip:#1e263a;
      --danger:#ef4444;
    }

    *{box-sizing:border-box}
    html,body{height:100%}
    body{
      margin:0; font-family: ui-sans-serif, system-ui, Segoe UI, Roboto, Helvetica, Arial;
      background:var(--bg); color:var(--text);
    }
    .app{ height:100%; display:grid; grid-template-rows:auto 1fr auto; max-width:900px; margin:0 auto; }
    header{
      display:flex; align-items:center; gap:.5rem; padding:.75rem 1rem; border-bottom:1px solid var(--border); background:var(--panel);
      position:sticky; top:0; z-index:10;
    }
    header h1{font-size:1rem; margin:0; font-weight:600}
    .spacer{flex:1}
    .btn{
      border:1px solid var(--border); background:transparent; color:var(--text);
      padding:.45rem .65rem; border-radius:.65rem; cursor:pointer; font-size:.9rem;
    }
    .btn-accent{background:var(--accent); color:white; border-color:var(--accent)}

    .chat{ padding:1rem; overflow:auto; display:flex; flex-direction:column; gap:.75rem; }
    .msg{ display:flex; gap:.5rem; align-items:flex-start; }
    .role{ font-size:.75rem; color:var(--muted); width:56px; text-align:right; user-select:none; }
    .bubble{
      max-width:80%; padding:.65rem .8rem; border:1px solid var(--border); border-radius:1rem;
      white-space:pre-wrap; word-wrap:break-word; background:var(--assistant);
    }
    .user .bubble{ background:var(--user) }
    .assistant .bubble{ background:var(--assistant) }
    .timestamp{font-size:.75rem; color:var(--muted); margin-top:.15rem}

    /* MathJax: evitar que rompa el layout en móvil */
    .bubble .mjx-container{
      overflow-x:auto; overflow-y:hidden; -webkit-overflow-scrolling:touch;
      padding:.1rem 0;
    }
    /* Tamaños agradables de display math */
    .bubble .mjx-display{ margin: .5rem 0 .6rem 0; }

    .composer{ border-top:1px solid var(--border); background:var(--panel); padding:.75rem; }
    .row{ display:flex; gap:.5rem; align-items:flex-end }
    textarea{
      flex:1; resize:none; min-height:44px; max-height:160px; padding:.65rem .75rem;
      border-radius:.75rem; border:1px solid var(--border); background:transparent; color:var(--text);
    }
    .controls{ display:flex; gap:.5rem; align-items:center }
    .iconbtn{ border:1px dashed var(--border); background:transparent; color:var(--text); padding:.45rem .65rem; border-radius:.65rem; cursor:pointer; }
    .send{ background:var(--accent); color:#fff; border:1px solid var(--accent); padding:.55rem .9rem; border-radius:.7rem; cursor:pointer }
    .send[disabled]{opacity:.6; cursor:not-allowed}

    .chips{ display:flex; gap:.5rem; flex-wrap:wrap; margin:.5rem 0 0 }
    .chip{
      display:inline-flex; align-items:center; gap:.4rem; background:var(--chip); border:1px solid var(--border); padding:.25rem .5rem; border-radius:999px; font-size:.8rem
    }
    .chip button{ all:unset; cursor:pointer; padding:0 .2rem; color:var(--muted) }

    .dropzone{
      margin-top:.5rem; border:1.5px dashed var(--border); border-radius:.75rem; padding:.6rem; text-align:center; color:var(--muted); font-size:.85rem
    }
    .dropzone.drag{ outline:2px solid var(--accent); color:var(--accent) }

    .small{font-size:.85rem; color:var(--muted)}
    a{ color:var(--accent) }
    .toast{
      position:fixed; bottom:16px; right:16px; background:var(--panel); border:1px solid var(--border);
      padding:.6rem .8rem; border-radius:.6rem; box-shadow:0 8px 24px rgba(0,0,0,.15); display:none;
    }
    .danger{ color:#fff; background:var(--danger); border-color:#00000022 }
  </style>

  <!-- ================ MathJax ================ -->
  <script>
    window.MathJax = {
      tex: {
        inlineMath: [['\\(','\\)']],
        displayMath: [['\\[','\\]'], ['$$','$$']],
        processEscapes: true
      },
      options: { skipHtmlTags: ['script','noscript','style','textarea','pre','code'] }
    };
  </script>
  <script defer src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
</head>
<body>
  <div class="app" id="app">
    <header>
      <h1>Chat de Matías</h1><span class="small">v1.1</span>
      <div class="spacer"></div>
      <button id="btnTheme" class="btn" title="Claro/Oscuro">🌓</button>
      <button id="btnReload" class="btn" title="Recargar historial">Historial</button>
      <button id="btnTest" class="btn">Probar config</button>
    </header>

    <main class="chat" id="chat" aria-live="polite"></main>

    <footer class="composer">
      <div class="row">
        <textarea id="input" placeholder="Escribe tu mensaje... (Shift+Enter salto de línea)" rows="1"></textarea>
        <div class="controls">
          <input id="file" type="file" multiple hidden />
          <button id="btnFile" class="iconbtn" title="Adjuntar archivos">📎 Adjuntar</button>
          <button id="btnSend" class="send">Enviar</button>
        </div>
      </div>
      <div id="chips" class="chips" aria-live="polite"></div>
      <div id="drop" class="dropzone">Arrastra archivos aquí o usa 📎 Adjuntar</div>
    </footer>
  </div>

  <div id="toast" class="toast"></div>

  <script>
    // =================== Tema sin sorpresas ===================
    const root = document.documentElement;
    const prefersDark = () => window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
    function getTheme(){
      return localStorage.getItem('theme') || (prefersDark() ? 'dark' : 'light');
    }
    function setTheme(t){
      root.setAttribute('data-theme', t === 'dark' ? 'dark' : 'light');
      localStorage.setItem('theme', t === 'dark' ? 'dark' : 'light');
    }

    // =================== Estado UI ===================
    const chatEl = document.getElementById('chat');
    const inputEl = document.getElementById('input');
    const fileEl = document.getElementById('file');
    const chipsEl = document.getElementById('chips');
    const dropEl = document.getElementById('drop');
    const btnSend = document.getElementById('btnSend');
    const btnFile = document.getElementById('btnFile');
    const btnReload = document.getElementById('btnReload');
    const btnTheme = document.getElementById('btnTheme');
    const btnTest = document.getElementById('btnTest');
    const toastEl = document.getElementById('toast');

    let pendingFiles = [];
    let sending = false;

    // =================== Utils ===================
    function escapeHTML(s){
      return String(s)
        .replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
    }
    function linkify(text){
      const esc = escapeHTML(text);
      const urlRegex = /(https?:\/\/[^\s]+)/g;
      return esc.replace(urlRegex, url => `<a href="${url}" target="_blank" rel="noopener noreferrer">${url}</a>`);
    }
    function timestamp(){ return new Date().toLocaleString(); }
    function showToast(msg, danger=false){
      toastEl.textContent = msg;
      toastEl.classList.toggle('danger', danger);
      toastEl.style.display = 'block';
      setTimeout(()=> toastEl.style.display='none', 2500);
    }
    function autoGrowTextarea(el){
      el.style.height = 'auto';
      el.style.height = Math.min(el.scrollHeight, 160) + 'px';
    }
    function scrollToBottom(){ chatEl.scrollTop = chatEl.scrollHeight; }

    // MathJax: tipografiar cuando agregamos contenido
    async function typesetNow(){
      if (window.MathJax && MathJax.typesetPromise){
        try { await MathJax.typesetPromise([chatEl]); } catch(e){ /* meh */ }
      }
    }

    // =================== Render ===================
    function addMessage(role, content){
      const row = document.createElement('div');
      row.className = `msg ${role}`;
      const roleEl = document.createElement('div');
      roleEl.className = 'role';
      roleEl.textContent = role === 'user' ? 'Tú' : 'Matías';
      const bubble = document.createElement('div');
      bubble.className = 'bubble';
      bubble.innerHTML = linkify(content || '');
      const ts = document.createElement('div');
      ts.className = 'timestamp';
      ts.textContent = timestamp();

      const col = document.createElement('div');
      col.style.display = 'flex';
      col.style.flexDirection = 'column';
      col.appendChild(bubble);
      col.appendChild(ts);

      row.appendChild(roleEl);
      row.appendChild(col);
      chatEl.appendChild(row);
      scrollToBottom();
      typesetNow();
    }

    function addTyping(){
      const row = document.createElement('div');
      row.className = 'msg assistant';
      row.id = 'typing';
      const roleEl = document.createElement('div');
      roleEl.className = 'role';
      roleEl.textContent = 'Matías';
      const bubble = document.createElement('div');
      bubble.className = 'bubble';
      bubble.innerHTML = 'Escribiendo…';
      const col = document.createElement('div');
      col.style.display = 'flex';
      col.style.flexDirection = 'column';
      col.appendChild(bubble);
      row.appendChild(roleEl);
      row.appendChild(col);
      chatEl.appendChild(row);
      scrollToBottom();
    }
    function removeTyping(){ const t = document.getElementById('typing'); if (t) t.remove(); }

    // =================== Archivos ===================
    function renderChips(){
      chipsEl.innerHTML = '';
      pendingFiles.forEach((p, idx)=>{
        const chip = document.createElement('span');
        chip.className = 'chip';
        chip.innerHTML = `${escapeHTML(p.name)} <small>(${Math.round((p.file.size||0)/1024)} KB)</small> <button title="Quitar" aria-label="Quitar">✕</button>`;
        chip.querySelector('button').addEventListener('click', ()=>{
          pendingFiles.splice(idx,1);
          renderChips();
        });
        chipsEl.appendChild(chip);
      });
    }
    function toBase64(file){
      return new Promise((resolve, reject)=>{
        const r = new FileReader();
        r.onload = () => resolve(r.result.split(',')[1] || '');
        r.onerror = reject;
        r.readAsDataURL(file);
      });
    }
    async function addFiles(list){
      const MAX_FILES = 8, MAX_SIZE = 25 * 1024 * 1024;
      const files = Array.from(list || []);
      for (const f of files){
        if (pendingFiles.length >= MAX_FILES){ showToast('Límite 8 archivos', true); break; }
        if ((f.size||0) > MAX_SIZE){ showToast(`Muy grande: ${f.name}`, true); continue; }
        try{
          const b64 = await toBase64(f);
          pendingFiles.push({ file:f, name:f.name, type:f.type || '', base64:b64 });
        } catch { showToast(`Error leyendo ${f.name}`, true); }
      }
      renderChips();
    }
    dropEl.addEventListener('dragover', e=>{ e.preventDefault(); dropEl.classList.add('drag'); });
    dropEl.addEventListener('dragleave', ()=> dropEl.classList.remove('drag'));
    dropEl.addEventListener('drop', async e=>{
      e.preventDefault(); dropEl.classList.remove('drag');
      await addFiles(e.dataTransfer.files);
    });

    // =================== Envío ===================
    async function send(){
      if (sending) return;
      const text = inputEl.value.trim();
      if (!text && pendingFiles.length === 0){ showToast('Escribe algo o adjunta un archivo', true); return; }
      sending = true; btnSend.disabled = true;

      addMessage('user', text || '(mensaje vacío)');
      inputEl.value = ''; autoGrowTextarea(inputEl);
      addTyping();

      try{
        if (pendingFiles.length === 0){
          google.script.run
            .withSuccessHandler(resp=>{ removeTyping(); addMessage('assistant', resp || '(sin respuesta)'); sending=false; btnSend.disabled=false; })
            .withFailureHandler(()=>{ removeTyping(); addMessage('assistant','❌ Error llamando a procesarPregunta.'); showToast('Fallo en servidor', true); sending=false; btnSend.disabled=false; })
            .procesarPregunta(text);
        } else if (pendingFiles.length === 1){
          const f = pendingFiles[0];
          google.script.run
            .withSuccessHandler(resp=>{ removeTyping(); addMessage('assistant', resp || '(sin respuesta)'); pendingFiles=[]; renderChips(); sending=false; btnSend.disabled=false; })
            .withFailureHandler(()=>{ removeTyping(); addMessage('assistant','❌ Error con adjunto.'); showToast('Fallo en servidor', true); sending=false; btnSend.disabled=false; })
            .procesarPreguntaConArchivo(text, f.name, f.base64);
        } else {
          const payload = pendingFiles.map(p=>({ name:p.name, type:p.type, base64:p.base64 }));
          google.script.run
            .withSuccessHandler(resp=>{ removeTyping(); addMessage('assistant', resp || '(sin respuesta)'); pendingFiles=[]; renderChips(); sending=false; btnSend.disabled=false; })
            .withFailureHandler(()=>{ removeTyping(); addMessage('assistant','❌ Error con múltiples adjuntos.'); showToast('Fallo en servidor', true); sending=false; btnSend.disabled=false; })
            .procesarPreguntaConArchivos(text, payload);
        }
      } catch {
        removeTyping(); addMessage('assistant','❌ Error inesperado en cliente.'); showToast('Error de cliente', true); sending=false; btnSend.disabled=false;
      }
    }

    // =================== Historial ===================
    function renderHistory(pairs){
      chatEl.innerHTML = '';
      if (!Array.isArray(pairs) || pairs.length === 0){
        addMessage('assistant', 'Hola. No hay historial reciente. Empieza la conversación.');
        return;
      }
      for (const m of pairs){
        const role = m.role === 'user' ? 'user' : 'assistant';
        addMessage(role, m.content || '');
      }
      typesetNow();
    }
    function loadHistory(n=30){
      google.script.run
        .withSuccessHandler(renderHistory)
        .withFailureHandler(()=> showToast('No pude cargar el historial', true))
        .cargarUltimasConversaciones(n);
    }

    // =================== Eventos ===================
    btnSend.addEventListener('click', send);
    btnFile.addEventListener('click', ()=> fileEl.click());
    fileEl.addEventListener('change', async e=>{ await addFiles(e.target.files); fileEl.value=''; });
    btnReload.addEventListener('click', ()=> loadHistory(60));
    btnTheme.addEventListener('click', ()=>{
      const current = root.getAttribute('data-theme') || 'light';
      setTheme(current === 'light' ? 'dark' : 'light');
    });
    btnTest.addEventListener('click', ()=>{
      google.script.run
        .withSuccessHandler(msg=> showToast(msg || 'OK'))
        .withFailureHandler(()=> showToast('Falló testConfig', true))
        .testConfig();
    });
    inputEl.addEventListener('input', ()=> autoGrowTextarea(inputEl));
    inputEl.addEventListener('keydown', e=>{
      if (e.key === 'Enter' && !e.shiftKey){ e.preventDefault(); send(); }
      if ((e.ctrlKey || e.metaKey) === true && e.key === 'Enter'){ e.preventDefault(); send(); }
    });

    // =================== Init ===================
    setTheme(getTheme());
    autoGrowTextarea(inputEl);
    loadHistory(30);
  </script>
</body>
</html>
