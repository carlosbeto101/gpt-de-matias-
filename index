<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Chat de Matías</title>
  <base target="_top">
  <style>
    :root{
      --bg:#f7f7f8;
      --panel:#ffffff;
      --muted:#687087;
      --text:#0f1222;
      --accent:#10a37f;
      --border:#e5e7eb;
      --user-bubble:#dcfce7;
    }
    body.dark{
      --bg:#0f1117; --panel:#161922; --muted:#8b90a5; --text:#e7e9ee; --accent:#6ea8ff; --border:#232736; --user-bubble:#1e263a;
    }
    *{box-sizing:border-box}
    html,body{height:100%}
    body{
      margin:0; font-family: ui-sans-serif, system-ui, Segoe UI, Roboto, Helvetica, Arial;
      background: var(--bg); color: var(--text);
      display:grid; grid-template-rows:auto 1fr; gap:8px; padding:12px;
    }
    .topbar{
      max-width:860px; margin:0 auto; width:100%;
      display:flex; align-items:center; justify-content:space-between;
      padding:10px 12px; border:1px solid var(--border); border-radius:12px; background:var(--panel);
    }
    .brand{font-weight:700; letter-spacing:.2px}
    .toggle{display:flex; align-items:center; gap:8px; font-size:14px; cursor:pointer; user-select:none}
    .toggle input{appearance:none; width:38px; height:22px; border-radius:999px; background:#d1d5db; position:relative; outline:none; border:1px solid var(--border)}
    .toggle input:checked{background:#2a2f40}
    .toggle input::after{content:""; position:absolute; top:2px; left:2px; width:16px; height:16px; border-radius:50%; background:#fff; transition:transform .2s ease}
    .toggle input:checked::after{transform:translateX(16px)}
    .layout{
      max-width:1000px; margin:0 auto; width:100%; height:100%;
      display:grid; grid-template-columns:220px 1fr; gap:8px;
    }
    .sidebar{
      display:flex; flex-direction:column; border:1px solid var(--border); border-radius:12px; background:var(--panel); overflow:hidden;
    }
    .newChat{
      border:0; background:var(--accent); color:#fff; font-weight:700; padding:10px; cursor:pointer; margin:8px; border-radius:10px;
    }
    .chatList{flex:1 1 auto; overflow:auto;}
    .chatList button{display:block; width:100%; text-align:left; padding:10px 12px; background:transparent; border:0; border-top:1px solid var(--border); color:var(--text); cursor:pointer;}
    .chatList button.active{background:rgba(16,163,127,.1);}
    body.dark .chatList button.active{background:rgba(110,168,255,.15);}
    .panel{
      display:grid; grid-template-rows: 1fr auto; gap:8px;
      border:1px solid var(--border); border-radius:12px; background:var(--panel);
    }
    .chat{overflow:auto; padding:14px}
    .msg{display:grid; grid-template-columns:40px 1fr; gap:10px; align-items:flex-start; margin:10px 0}
    .avatar{width:40px; height:40px; border-radius:10px; display:grid; place-items:center; background:#10a37f; color:#fff; font-weight:700}
    .bubble{padding:10px 12px; border:1px solid var(--border); border-radius:10px; background:var(--panel); color:var(--text); white-space:pre-wrap; word-wrap:break-word;}
    body.dark .avatar{background:#22283a; color:#fff}
    body.dark .bubble{background:#101420; color:var(--text)}
    .row.user{grid-template-columns:1fr 40px}
    .row.user .avatar{order:2; background:#d9d9e3; color:#1f2937}
    .row.user .bubble{justify-self:end; background:var(--user-bubble); color:#064e3b}
    body.dark .row.user .avatar{background:#dbe6ff; color:#1a2240}
    body.dark .row.user .bubble{background:#e9f1ff; color:#0b1225}
    .meta{margin-top:4px; font-size:12px; color:var(--muted)}
    .composerWrap{padding:12px; border-top:1px solid var(--border); display:grid; gap:8px}
    .attachBar{display:flex; align-items:center; gap:8px; flex-wrap:wrap;}
    .dropzone{flex:1 1 auto; min-height:56px; display:flex; align-items:center; justify-content:center; padding:10px;
      border:1px dashed var(--border); border-radius:10px; color:var(--muted); cursor:pointer;}
    .dropzone.drag{border-color:var(--accent); color:var(--accent); background:rgba(16,163,127,.1)}
    .fileInput{display:none}
    .fileList{display:flex; gap:6px; flex-wrap:wrap}
    .fileTag{font-size:12px; color:var(--muted); border:1px solid var(--border); border-radius:999px; padding:4px 8px}
    .composer{display:grid; grid-template-columns: 1fr auto; gap:8px;}
    .inp{height:44px; border:1px solid var(--border); background:#fff; color:var(--text);
      border-radius:10px; padding:0 12px; outline:none;}
    body.dark .inp{background:#0e1220}
    .btn{height:44px; padding:0 14px; border-radius:10px; border:1px solid var(--border);
      background:var(--accent); color:#fff; font-weight:700; cursor:pointer;}
    .btn:disabled{opacity:.6; cursor:not-allowed}
    a{color:var(--accent)}
    .typing{display:inline-flex; gap:6px}
    .dot{width:6px; height:6px; border-radius:999px; background:var(--muted); animation:blink 1.2s infinite}
    .dot:nth-child(2){animation-delay:.15s} .dot:nth-child(3){animation-delay:.3s}
    @keyframes blink{0%,80%,100%{opacity:.2} 40%{opacity:1}}
  </style>
  <script>
    window.MathJax={
      tex:{inlineMath:[["$","$"],["\\(","\\)"]],displayMath:[["$$","$$"],["\\[","\\]"]]},
    };
  </script>
  <script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
</head>
<body>
  <header class="topbar">
    <div class="brand">Chat de Matias</div>
     <label class="toggle" title="Tema claro/oscuro">
      <span>☾</span>
      <input id="switch" type="checkbox" />
      <span>☀︎</span>
    </label>
  </header>
  <div class="layout">
    <aside class="sidebar">
      <button id="newChat" class="newChat">+ Nuevo chat</button>
      <div id="chatList" class="chatList"></div>
    </aside>
    <main class="panel">
      <section id="chat" class="chat" aria-live="polite" aria-label="Historial de chat"></section>
      <div class="composerWrap">
        <div class="attachBar">
          <label id="dropzone" class="dropzone" for="archivo">Suelta archivos aquí o haz clic</label>
          <input id="archivo" class="fileInput" type="file" multiple />
          <div id="fileList" class="fileList" aria-live="polite"></div>
        </div>
        <div class="composer">
          <input type="text" id="pregunta" class="inp" placeholder="Escribe tu mensaje y presiona Enter" autocomplete="off" />
          <button class="btn" id="enviar">Enviar</button>
        </div>
      </div>
    </main>
  </div>
  <script>
    const qs=(s,el=document)=>el.querySelector(s);
    const chat=qs('#chat'),input=qs('#pregunta'),btn=qs('#enviar');
    const fileInput=qs('#archivo'),fileList=qs('#fileList'),dropzone=qs('#dropzone');
    const switchEl=qs('#switch');
    const chatList=qs('#chatList'),newChatBtn=qs('#newChat');
    let currentFiles=[],chats=[],currentChatId=null;

    // Tema persistente
    const saved=localStorage.getItem('theme')||'light';
    if(saved==='dark'){document.body.classList.add('dark');switchEl.checked=true;}
    switchEl.addEventListener('change',()=>{document.body.classList.toggle('dark',switchEl.checked);localStorage.setItem('theme',switchEl.checked?'dark':'light');});

    const now=()=>new Date().toLocaleTimeString([], {hour:'2-digit',minute:'2-digit'});

    function msgTemplate({ who, text, typing=false }){
      const row=document.createElement('div'); row.className=`msg row ${who}`;
      const avatar=document.createElement('div'); avatar.className='avatar'; avatar.textContent=who==='user'?'U':'🤖';
      const bubble=document.createElement('div'); bubble.className='bubble';
      if(typing){
        bubble.innerHTML=`<span class="typing"><span class="dot"></span><span class="dot"></span><span class="dot"></span></span>`;
      }else{
        bubble.textContent=text;
      }
      const meta=document.createElement('div'); meta.className='meta'; meta.textContent=now();
      if(who==='user'){
        row.style.gridTemplateColumns='1fr 40px';
        const col=document.createElement('div'); col.appendChild(bubble); col.appendChild(meta);
        row.appendChild(document.createElement('div')); row.appendChild(col); row.appendChild(avatar);
      }else{
        row.appendChild(avatar); const col=document.createElement('div'); col.appendChild(bubble); col.appendChild(meta); row.appendChild(col);
      }
      return row;
    }
    function addMessage(who,text){
      const n=msgTemplate({who,text});
      chat.appendChild(n);
      chat.scrollTop=chat.scrollHeight;
      if(window.MathJax){MathJax.typesetPromise([n.querySelector('.bubble')]);}
      return n;
    }
    function addTyping(){const n=msgTemplate({who:'gpt',text:'',typing:true}); chat.appendChild(n); chat.scrollTop=chat.scrollHeight; return n;}
    function replaceTyping(node,text){
      const bubble=node.querySelector('.bubble'); if(bubble) bubble.textContent=text;
      const meta=node.querySelector('.meta'); if(meta) meta.textContent=now();
      if(bubble && window.MathJax){MathJax.typesetPromise([bubble]);}
    }
    function setSending(b){btn.disabled=b;input.disabled=b;}

    // Chats
    function saveChats(){localStorage.setItem('chats',JSON.stringify(chats));}
    function loadChats(){try{chats=JSON.parse(localStorage.getItem('chats')||'[]');}catch{chats=[];}}
    function renderChatList(){chatList.innerHTML='';chats.forEach(c=>{const b=document.createElement('button');b.textContent=c.title||'Sin título';b.className=c.id===currentChatId?'active':'';b.addEventListener('click',()=>openChat(c.id));chatList.appendChild(b);});}
    function openChat(id){currentChatId=id;chat.innerHTML='';const c=chats.find(x=>x.id===id);if(c){c.messages.forEach(m=>addMessage(m.role,m.content));}renderChatList();}
    function startNewChat(){const id=Date.now().toString();chats.push({id,title:'Nuevo chat',messages:[]});saveChats();openChat(id);const greet='Hola, soy tu mini chat. Ahora acepto imágenes, PDFs y más.';addMessage('gpt',greet);updateCurrentChat('assistant',greet);}
    function updateCurrentChat(role,content){const c=chats.find(x=>x.id===currentChatId);if(!c)return;c.messages.push({role,content});if(role==='user'&&c.title==='Nuevo chat'){c.title=content.slice(0,30)||'Sin título';}saveChats();renderChatList();}

    newChatBtn.addEventListener('click',startNewChat);
    loadChats();
    if(chats.length){openChat(chats[chats.length-1].id);}else{startNewChat();}

    // archivos UI
    function renderFileList(files){fileList.innerHTML='';[...files].forEach(f=>{const tag=document.createElement('span');tag.className='fileTag';const kb=Math.max(1,Math.round(f.size/1024));tag.textContent=`${f.name} • ${kb} KB`;fileList.appendChild(tag);});}
    fileInput.addEventListener('change',()=>{currentFiles=[...fileInput.files];renderFileList(currentFiles);});
    ['dragenter','dragover'].forEach(evt=>dropzone.addEventListener(evt,e=>{e.preventDefault();dropzone.classList.add('drag');}));
    ['dragleave','drop'].forEach(evt=>dropzone.addEventListener(evt,e=>{e.preventDefault();dropzone.classList.remove('drag');}));
    dropzone.addEventListener('drop',e=>{e.preventDefault();const files=[...(e.dataTransfer?.files||[])];if(!files.length)return;currentFiles=files;renderFileList(currentFiles);});

    function readFilesAsBase64(files,maxMB=10){
      return Promise.all([...files].map(file=>new Promise((resolve,reject)=>{
        if(file.size>maxMB*1024*1024) return reject(new Error(`"${file.name}" supera ${maxMB} MB`));
        const reader=new FileReader();
        reader.onload=e=>{const base64=String(e.target.result).split(',')[1];resolve({name:file.name,base64,type:file.type||'application/octet-stream'});};
        reader.onerror=()=>reject(new Error(`Error leyendo ${file.name}`));
        reader.readAsDataURL(file);
      })));
    }

    function enviarPregunta(){
      const text=input.value.trim();
      const hasFiles=currentFiles.length>0;
      if(!text && !hasFiles) return;
      if(text){addMessage('user',text);updateCurrentChat('user',text);}
      if(hasFiles){const msg=`Adjuntos: ${currentFiles.map(f=>f.name).join(', ')}`;addMessage('user',msg);updateCurrentChat('user',msg);}
      const typing=addTyping();
      replaceTyping(typing,hasFiles?'📎 Subiendo…':'⌛ Procesando…');
      setSending(true);
      const runner=(typeof google!=='undefined'&&google.script&&google.script.run)?google.script.run:null;
      const replaceAndStore=(node,text)=>{replaceTyping(node,text);updateCurrentChat('assistant',text);};
      if(!runner){setTimeout(()=>{replaceAndStore(typing,'Simulación local');setSending(false);cleanupAfterSend();},600);return;}
      if(!hasFiles){
        runner.withSuccessHandler(res=>{replaceAndStore(typing,res);cleanupAfterSend();})
              .withFailureHandler(err=>{replaceAndStore(typing,`⚠️ ${err?.message||'error'}`);cleanupAfterSend();})
              .procesarPregunta(text);
        return;
      }
      readFilesAsBase64(currentFiles).then(payload=>{
        runner.withSuccessHandler(res=>{replaceAndStore(typing,res);cleanupAfterSend();})
              .withFailureHandler(()=>{
                // fallback uno por uno
                const seq=payload.reduce((p,f)=>p.then(()=>new Promise((resolve,reject)=>{
                  runner.withSuccessHandler(res=>resolve(res))
                        .withFailureHandler(reject)
                        .procesarPreguntaConArchivo(text||`Analiza el adjunto: ${f.name}`,f.name,f.base64);
                })),Promise.resolve(''));
                seq.then(res=>{replaceAndStore(typing,res||'Listo.');cleanupAfterSend();})
                   .catch(err=>{replaceAndStore(typing,`⚠️ ${err?.message||'falló'}`);cleanupAfterSend();});
              })
              .procesarPreguntaConArchivos(text||'Analiza los adjuntos',payload);
      }).catch(e=>{replaceAndStore(typing,`⚠️ ${e.message}`);cleanupAfterSend();});
    }
    function cleanupAfterSend(){setSending(false);input.value='';fileInput.value='';fileList.innerHTML='';currentFiles=[];}
    btn.addEventListener('click',enviarPregunta);
    input.addEventListener('keydown',e=>{if(e.key==='Enter'&&!e.shiftKey){e.preventDefault();enviarPregunta();}});
  </script>
</body>
</html>
